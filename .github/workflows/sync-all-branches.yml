name: Sync Remote and Handle FM.json

on:
  schedule:
    - cron: '0 * * * *'  # 每小时执行一次
  workflow_dispatch:  # 支持手动触发同步和 JSON 处理操作
  repository_dispatch:
    types: [remote-changed]  # 自定义事件类型

jobs:
  sync-and-handle:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取所有历史记录

      - name: Configure Git
        run: |
          set -e
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git config --global push.autoSetupRemote true
          echo "Git 配置完成"

      - name: Add Remote Repository
        run: |
          set -e
          git remote add remote_repo https://github.com/lystv/fmapp.git || true
          git fetch remote_repo --prune  # 清理已删除的远程分支
          echo "成功获取远程仓库分支信息"

      - name: Cache JSON file
        uses: actions/cache@v3
        with:
          path: yysd-zl.json
          key: ${{ runner.os }}-yysd-zl-json-${{ hashFiles('https://raw.githubusercontent.com/lystv/fmapp/app/yysd-zl.json') }}

      - name: Fetch JSON file
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          if ! curl -o yysd-zl.json https://raw.githubusercontent.com/lystv/fmapp/app/yysd-zl.json; then
            echo "下载 JSON 文件时出错，请检查网络连接或 URL 是否正确。"
            exit 1
          fi

      - name: Sync All Branches
        run: |
          set -e
          for branch in $(git branch -r --list remote_repo/* | grep -v '\->'); do
            local_branch=$(echo "$branch" | sed 's/^remote_repo\///')
            echo "开始同步分支: $local_branch"
            # 尝试切换到本地分支，如果不存在则创建
            if git show-ref --verify --quiet "refs/heads/$local_branch"; then
              git checkout "$local_branch"
            else
              git checkout -b "$local_branch"
            fi
            # 获取远程文件列表
            remote_files=$(git ls-tree -r remote_repo/"$local_branch" --name-only)
            for file in $remote_files; do
              if [ -e "$file" ]; then
                local_md5=$(md5sum "$file" | awk '{print $1}')
                remote_md5=$(git show remote_repo/"$local_branch":"$file" | md5sum | awk '{print $1}')
                if [ "$local_md5" = "$remote_md5" ]; then
                  echo "文件 $file 的 MD5 一致，忽略更新"
                  continue
                fi
              fi
              if [[ $file != ".github/workflows/"* ]]; then
                # 检查文件是否存在于本地仓库
                if git ls-tree -r "$local_branch" --name-only | grep -q "$file"; then
                  # 对文件路径进行转义
                  escaped_file=$(printf "%q" "$file")
                  git checkout remote_repo/"$local_branch" -- "$escaped_file"
                else
                  echo "文件 $file 不在本地仓库，跳过更新"
                fi
              fi
            done
            # 恢复特定文件和文件夹
            if [ -e ".github/workflows" ]; then
              git checkout "$local_branch" .github/workflows
            fi
            if git push --force https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/275497197/fmapp.git "$local_branch"; then
              echo "成功同步并推送分支 $local_branch 到你的仓库"
            else
              echo "推送分支 $local_branch 到你的仓库时出错"
              exit 1
            fi
          done

      - name: Switch to app branch
        run: |
          git checkout app

      - name: Replace lystv with repository path and save as FM.json
        run: |
          sed 's/lystv/275497197/g' yysd-zl.json > FM.json
          rm -f yysd-zl.json

      - name: Restore .github/workflows in app branch
        run: |
          if [ -e ".github/workflows" ]; then
            git checkout app .github/workflows
          fi

      - name: Commit and push changes
        run: |
          git add FM.json
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update FM.json with replaced content"
            git push
          fi    
